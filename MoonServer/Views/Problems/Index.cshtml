@model IEnumerable<MoonServer.Models.ProblemList>

@{
    ViewBag.Title = "MoonBoard Problems";
    List<string> gradeList = Constants.GetFilter("grade").Categories;
    gradeList.Sort(new MoonServer.Models.AmericanGradeComparer());
}

<link href="~/lib/tabulator/css/tabulator.min.css" rel="stylesheet" />
<link href="~/lib/bootstrap-toggle/css/bootstrap-toggle.min.css" rel="stylesheet" />

<div class="container">
    <div class="row">
        <div class="col-7" id="filterDiv">
            <div class="row">
                <div class="col-3">
                    <label for="gradeGrp">Grade:</label>
                </div>
                <div id="gradeGrp" class="filters btn-group btn-group-sm" role="group">
                    @foreach (var g in gradeList)
                    {
                        <button type="button" class="btn btn-outline-primary" data-filter="grade:@g">@g</button>
                    }
                    <button type="button" class="btn btn-outline-primary active allfilter" data-filter="grade:*">show all</button>
                </div>
            </div>
            <div class="row">
                <div class="col-3">
                    <label for="repeatsGrp">Repeats:</label>
                </div>
                <div id="repeatsGrp" class="filters btn-group btn-group-sm" role="group">
                    <button type="button" class="btn btn-outline-primary" data-filter="repeats:@Constants.GetString("GTEFirstCatName")">@("<" + Constants.GetFilter("repeats").Categories[0])</button>
                    @foreach (var r in Constants.GetFilter("repeats").Categories.ConvertAll(s => int.Parse(s)))
                    {
                        if (r > 0)
                        {
                            <button type="button" class="btn btn-outline-primary" data-filter="repeats:@r">>@r</button>
                        }
                    }
                    <button type="button" class="btn btn-outline-primary active allfilter" data-filter="repeats:*">show all</button>
                </div>
            </div>
            <div class="row">
                <div class="col-3">
                    <label for="ratingGrp">Rating:</label>
                </div>
                <div id="ratingGrp" class="filters btn-group btn-group-sm" role="group">
                    <button type="button" class="btn btn-outline-primary" data-filter="rating:@Constants.GetString("GTEFirstCatName")">@("<" + Constants.GetFilter("rating").Categories[0])</button>
                    @foreach (var r in Constants.GetFilter("rating").Categories.ConvertAll(s => int.Parse(s)))
                    {
                        if (r > 0)
                        {
                            <button type="button" class="btn btn-outline-primary" data-filter="rating:@r">@( r + (r < 3 ? "+" : "") )</button>
                        }
                    }
                    <button type="button" class="btn btn-outline-primary active allfilter" data-filter="rating:*">show all</button>
                </div>
            </div>
            <div class="row">
                <div class="col-5">
                    <label for="benchmarkGrp">Benchmark only?</label>
                </div>
                <div id="benchmarkGrp" class="filters btn-group btn-group-sm" role="group">
                    <button type="button" class="btn btn-outline-primary" data-filter="benchmark:B">yes</button>
                    <button type="button" class="btn btn-outline-primary active allfilter" data-filter="benchmark:*">no</button>
                </div>
            </div>
            <div class="row">
                <div class="col-5 input-group">
                    <div class="input-group-prepend"><span class="input-group-text">Name</span></div>
                    <input type="text" class="form-control" maxlength="20" id="namefilter" />
                </div>
                <button type="button" id="datagetter" class="col-3 btn btn-sm btn-primary">Get Data</button>
                <button type="button" id="resetbtn" class="col-3 btn btn-sm btn-primary hide">Reset</button>
            </div>
        </div>

        <div class="col-5">
            <div class="row" id="lists"></div>
            <div class="row" id="listBtnDiv">
                <div class="col-5">
                    <button type="button" id="addListBtn" class="btn btn-sm btn-primary" data-toggle="modal" data-target="#addListModal">Add</button>
                </div>
                <div class="col-7">
                    <button type="button" id="delListBtn" class="btn btn-sm btn-primary" disabled>Delete</button>
                </div>
            </div>
        </div>
    </div>


    <div class="row">
        <div class="col-8" id="problems"></div>
        <div class="col-4" id="options">
            <div id="probcount" class="h2 justify-content-end"></div>
            <div class="row" id="probBtnDiv">
                <div>
                    <button type="button" id="addBtn" class="btn btn-sm btn-primary" disabled data-toggle="modal" data-target="#addProbModal">Add To A List</button>
                </div>
                <div>
                    <button type="button" id="removeBtn" class="btn btn-sm btn-primary" disabled>Remove From This List</button>
                </div>
            </div>
            <div class="row w-100">
                <div class="col-8">Send commands</div>
                <div class="col-4"><input id="mbToggle" type="checkbox" checked data-toggle="toggle"></div>
            </div>
        </div>
    </div>
    <div class="modal fade" id="addProbModal" tabindex="-1" role="dialog" aria-labelledby="addProbModalTitle" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addProbModalTitle">Select List</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body"><div id="addProbTbl"></div></div>
            </div>
        </div>
    </div>
    <div class="modal fade" id="addListModal" tabindex="-1" role="dialog" aria-labelledby="addListModalTitle" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="input-group">
                        <div class="input-group-prepend"><span class="input-group-text">Name</span></div>
                        <input type="text" class="form-control" maxlength="20" id="listNameTxt" />
                        <button type="button" id="addListConfirmBtn" class="btn btn-sm btn-primary">OK</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

</div>
@section scripts {
    <script type="text/javascript" src="~/lib/tabulator/js/tabulator.min.js"></script>
    <script type="text/javascript" src="~/lib/bootstrap-toggle/js/bootstrap-toggle.min.js"></script>

    <script language="javascript">
        $('#resetbtn').hide();

        function resetFilters() {
            $('.filters button')
                .removeAttr('disabled')
                .removeClass(['active', 'btn-outline-danger'])
                .addClass('btn-outline-primary')
                .off('click tap');
            $('.btn-group button').on('click tap', function () {
                $(this).siblings('button').removeClass('active');
                $(this).addClass('active');
            });
            $('button.allfilter').addClass('active');
        }

        function updateProblemCount(data) {
            var num = data.length;
            if (num == 0) { $('#probcount').hide(); }
            $('#probcount').text(num + " problem" + (num > 0 ? 's' : '')).show();
        }

        function updateProblemCountOnFilter(filters, rows) {
            updateProblemCount(rows);
        }

        function refreshProblemLists() {
            $listTable = new Tabulator("#lists", {
                ajaxURL: "/api/ProblemLists/Get", //ajax URL
                ajaxConfig: "get", //ajax HTTP request type
                ajaxResponse: function (url, params, response) { return response['ProblemLists']; },
                layout: "fitData",         //fit columns to width of data
                layoutColumnsOnNewData: true,
                tooltips: true,            //show tool tips on cells
                movableColumns: false,     //allow column order to be changed
                resizableRows: false,      //allow row order to be changed
                initialSort: [             //set the initial sort order of the data
                    { column: "Name", dir: "asc" },
                ],
                columns: [                 //define the table columns
                    { title: "Name", field: "Name" },
                    { title: "Problems", field: "Count" },
                    { title: "Id", field: "Id", visible: false }
                ],
                selectable: 1,
                rowTap: function (e, row) { row.toggleSelect(); },
                rowSelected: function (row) {
                    $('#problems').attr('disabled', true);
                    loadProblemsFromList(row.getData().Id);
                }
            });
        }

        var postFilters = {}; // No filters at the start
        var refreshFilters = function () {
            var _filters = [];
            if (postFilters['name']) {
                _filters.push({ field: 'Name', type: 'like', value: postFilters['name'] });
            }
            if (postFilters['grade']) {
                _filters.push({ field: 'Grade', type: '=', value: postFilters['grade'] });
            }
            if (postFilters['repeats']) {
                _filters.push({ field: 'Repeats', type: '>=', value: postFilters['repeats'] });
            }
            if (postFilters['rating']) {
                _filters.push({ field: 'Rating', type: '>=', value: postFilters['rating'] });
            }
            if (postFilters['benchmark']) {
                _filters.push({ field: 'IsBenchmark', type: '=', value: true });
            }
            $table.setFilter(_filters);
        };

        // tables
        var $table;
        var $listTable;
        var $addListTable;
        var $listSelected;
        // state possibilities
        const PROBLEM_SOURCE = { NONE: 0, FILTER: 1, LIST: 2 }; // Where we are getting problems from
        // initial state
        var $problemSource = PROBLEM_SOURCE.NONE;

        function problemSourceChanged(newSource) {
            if (newSource == $problemSource) { return; }
            if (newSource == PROBLEM_SOURCE.NONE) {
                $('#datagetter').show();
                $('#resetbtn').hide();
                resetFilters();
                $('#addBtn').attr('disabled', true);
                $('#removeBtn').attr('disabled', true);
                $('#delListBtn').attr('disabled', true);
            }
            if (newSource == PROBLEM_SOURCE.FILTER) {
                $('#datagetter').hide();
                $('#resetbtn').show();
                $('#addBtn').attr('disabled', true);
                $('#removeBtn').attr('disabled', true);
                $('#delListBtn').attr('disabled', true);
            }
            if (newSource == PROBLEM_SOURCE.LIST) {
                $('#datagetter').show();
                $('#resetbtn').hide();
                resetFilters();
                $('#addBtn').attr('disabled', true);
                $('#removeBtn').attr('disabled', true);
                $('#delListBtn').attr('disabled', false);
            }
            $problemSource = newSource;
        }

        function loadProblemsFromList(listId) {
            $listSelected = listId;
            $.ajax({
                type: 'GET',
                url: "/api/ProblemLists/Choose/" + listId
            })
                .done(function (data) {
                    showProblems(data);
                    problemSourceChanged(PROBLEM_SOURCE.LIST);
                    $('#problems').attr('disabled', false);
                });
        }

        // Set up a trigger on key press which will apply filter after 1 second
        // Timer restarts if another key press occurs
        var nameFilterTimeout = null;
        $('#namefilter').on('keyup', function () {
            var that = this;
            if (nameFilterTimeout !== null) {
                clearTimeout(nameFilterTimeout);
            }
            nameFilterTimeout = setTimeout(function () {
                postFilters['name'] = $(that).val();
                refreshFilters();
            }, 1000);
        });

        function showProblems(data) {
            if (data['Status'] == 200) {
                $table = new Tabulator("#problems", {
                    data: data['Problems'],    //load row data from array
                    layout: "fitData",         //fit columns to width of data
                    layoutColumnsOnNewData: true,
                    tooltips: true,            //show tool tips on cells
                    pagination: "local",       //paginate the data
                    paginationSize: 20,        //allow 20 rows per page of data
                    movableColumns: false,      //allow column order to be changed
                    resizableRows: false,       //allow row order to be changed
                    initialSort: [             //set the initial sort order of the data
                        { column: "Name", dir: "asc" },
                    ],
                    columns: [                 //define the table columns
                        { title: "Name", field: "Name" },
                        { title: "Grade", field: "GradeName" },
                        { title: "Repeats", field: "Repeats" },
                        { title: "Rating", field: "Rating" },
                        { title: "Benchmark", field: "IsBenchmark" },
                        { title: "Id", field: "Id", visible: false }
                    ],
                    selectable: 1,
                    rowTap: function (e, row) { row.toggleSelect(); },
                    rowSelected: function (row) {
                        if (!$('#mbToggle').prop('checked')) {
                            return;
                        }
                        $.ajax({
                            type: 'GET',
                            url: "/api/Problems/Choose/" + row.getData().Id
                        })
                            .done(function (data) {
                                if (data['Message'].length > 0) {
                                    alert("HTTP code " + data['Status'] + ": " + data['Message']);
                                }
                            });
                    },
                    dataLoaded: updateProblemCount,
                    dataFiltered: updateProblemCountOnFilter,
                    rowSelectionChanged: function (data, rows) {
                        if (data.length == 0) {
                            $('#probBtnDiv button').attr('disabled',true);
                        }
                        else {
                            if ($problemSource == PROBLEM_SOURCE.LIST) {
                                $('#addBtn').attr('disabled',true);
                                $('#removeBtn').attr('disabled',false);
                            }
                            else {
                                $('#addBtn').attr('disabled',false);
                                $('#removeBtn').attr('disabled',true);
                            }
                        }
                    }

                });
            }
            else {
                if (!data['Message']) { data['Message'] = 'Unknown'; }
                if (data['Status'] == 403 && data['SubStatus'] == "@Constants.GetString("TooManyProblemsCode")") {
                    alert(data['Message']);
                }
                else {
                    alert("HTTP code " + data['Status'] + ": " + data['Message']);
                }
            }
        };

        $(document).ready(function () {
            resetFilters();

            $('#resetbtn').on('click tap', function () {
                $('#problems').attr('disabled', false);
                problemSourceChanged(PROBLEM_SOURCE.NONE);
            });

            $('#addBtn').on('click tap', function () {
                $('#addListsModal').modal().on('shown.bs.modal', function(event) {
                    $addListTable = new Tabulator("#addProbTbl", {
                        ajaxURL: "/api/ProblemLists/Get", //ajax URL
                        ajaxConfig: "get", //ajax HTTP request type
                        ajaxResponse: function (url, params, response) { return response['ProblemLists']; },
                        layout: "fitData",         //fit columns to width of data
                        layoutColumnsOnNewData: true,
                        tooltips: true,            //show tool tips on cells
                        movableColumns: false,     //allow column order to be changed
                        resizableRows: false,      //allow row order to be changed
                        initialSort: [             //set the initial sort order of the data
                            { column: "Name", dir: "asc" },
                        ],
                        columns: [                 //define the table columns
                            { title: "Name", field: "Name" },
                            { title: "Count", field: "Count" },
                            { title: "Id", field: "Id", visible: false }
                        ],
                        selectable: 1,
                        rowTap: function (e, row) { row.toggleSelect(); },
                        rowSelected: function (row) {
                            var listId = row.getData().Id;
                            var probs = $table.getSelectedRows();
                            var probId = probs[0].getData().Id;
                            $.ajax({
                                type: 'GET',
                                url: "/api/ProblemLists/" + listId + "/AddProblem/" + probId
                            })
                                .done(function (data) {
                                    if (data['Message'].length > 0) { alert(data['Message']); }
                                    $('#addListsModal').modal('hide');
                                    refreshProblemLists();
                                });
                        }
                    });
                });
            });
            $('#removeBtn').on('click tap', function () {
                var lists = $listTable.getSelectedRows();
                var listId = lists[0].getData().Id;
                var probs = $table.getSelectedRows();
                var probId = probs[0].getData().Id;
                $.ajax({
                    type: 'GET',
                    url: "/api/ProblemLists/" + listId + "/RemoveProblem/" + probId
                })
                    .done(function (data) {
                        if (data['Message'].length > 0) { alert(data['Message']); }
                        refreshProblemLists();
                        $listTable.options.dataLoaded = function () {
                            $listTable.searchRows("Id", "=", $listSelected)[0].select();
                            $listTable.options.dataLoaded = null;
                        };
                    });
            });
            $('#addListConfirmBtn').on('click tap', function () {
                var listName = $('#listNameTxt').val();
                $.ajax({
                    type: 'POST',
                    url: "/api/ProblemLists/Add",
                    data: '"' + listName + '"',
                    contentType: 'application/json'
                })
                    .done(function (data) {
                        $('#addListModal').modal('hide');
                        refreshProblemLists();
                    });
            });
            $('#delListBtn').on('click tap', function () {
                var lists = $listTable.getSelectedRows();
                var listId = lists[0].getData().Id;
                $.ajax({
                    type: 'GET',
                    url: "/api/ProblemLists/Remove/" + listId
                })
                    .done(function (data) {
                        refreshProblemLists();
                    });
            });

            refreshProblemLists();

            $('#datagetter').on('click tap', function () {
                $listTable.deselectRow();
                $('#problems').attr('disabled', true);
                var preFilters = {};
                $('.filters button.active').each(function (i, e) {
                    var filterParts = $(this).attr('data-filter').split(':');
                    if (filterParts[1] == "*") {
                        preFilters[filterParts[0]] = "@Constants.GetString("AllFilterName")";
                    } else {
                        preFilters[filterParts[0]] = filterParts[1];
                    }
                });
                $.ajax({
                    type: 'POST',
                    data: JSON.stringify(preFilters),
                    url: "/api/Problems",
                    contentType: 'application/json'
                })
                    .done(function (data) {
                        showProblems(data);
                        if (data['Status'] != 200) return;
                        // set up buttons for further filtering
                        $('.filters button.active').each(function (i, e) {
                            var elem = $(e);
                            if (elem.hasClass('allfilter')) {
                                elem.removeClass('btn-outline-primary').addClass('btn-outline-danger');
                                elem.siblings().removeClass('btn-outline-primary').addClass('btn-outline-danger');
                            }
                            else {
                                elem.siblings().attr('disabled', true);
                            }
                        });
                        // set up handler for further filtering
                        $('.filters .btn-outline-danger').on('click tap', function () {
                            var filterParts = $(this).attr('data-filter').split(':');
                            if (filterParts[1] == "*") {
                                delete postFilters[filterParts[0]];
                            } else {
                                postFilters[filterParts[0]] = filterParts[1];
                            }
                            refreshFilters();
                        });
                        problemSourceChanged(PROBLEM_SOURCE.FILTER);
                        $('#problems').attr('disabled', false);
                    });
            });
        });
    </script>
}
