@model IEnumerable<MoonServer.Models.ProblemList>

@{
    ViewBag.Title = "MoonBoard Problems";
    List<string> gradeList = Constants.GetFilter("grade").Categories;
    gradeList.Sort(new MoonServer.Models.AmericanGradeComparer());
}

<link href="~/lib/tabulator/css/tabulator.min.css" rel="stylesheet">

<div class="container">
    <div class="row">
        <div class="col-8">
            <div style="height:100px">
                <div id="datagetter" class="button-blue">Get Data</div>
                <div id="resetbtn" class="button-blue">Reset</div>
                <div id="probcount" class="h1 col-2"></div>
            </div>
            <div style="height:100px">
                <div class="filters button-group">
                    @foreach (var g in gradeList)
                    {
                        <button class="button-blue" data-filter="grade:@g">@g</button>
                    }
                    <button class="button-blue is-checked allfilter" data-filter="grade:*">show all</button>
                </div>

                <div class="filters button-group">
                    @foreach (var i in Constants.GetFilter("repeats").Categories.ConvertAll(s => int.Parse(s)))
                    {
                        if (i > 0)
                        {
                            <button class="button-blue" data-filter="repeats:@i">@i+ repeat@(i > 1 ? "s" : "")</button>
                        }
                    }
                    <button class="button-blue is-checked allfilter" data-filter="repeats:*">show all</button>
                </div>

                <div class="filters button-group">
                    @foreach (var i in Constants.GetFilter("rating").Categories.ConvertAll(s => int.Parse(s)))
                    {
                        if (i > 0)
                        {
                            <button class="button-blue" data-filter="rating:@i">@i star@(i > 1 ? "s" : "")</button>
                        }
                    }
                    <button class="button-blue is-checked allfilter" data-filter="rating:*">show all</button>
                </div>

                <div class="filters button-group">
                    <button class="button-blue" data-filter="benchmark:B">benchmark only</button>
                    <button class="button-blue is-checked allfilter" data-filter="benchmark:*">show all</button>
                </div>

                <div class="filters form-text"><input type="text" maxlength="20" id="namefilter" /></div>
            </div>
        </div>
        <div class="col-4" style="height:200px" id="lists">
            <table class="table">
                @foreach (var item in Model)
                {
                    <tr class="list-select" id="">
                        <td>
                            @Html.DisplayFor(m => item.Name)
                        </td>
                        <td>
                            @item.ProblemListEntries.Count
                            <span class="listId" hidden>@item.Id</span>
                        </td>
                    </tr>
                }
            </table>
        </div>

    </div>

    <div class="row w-100" id="problems"></div>
</div>
@section scripts {
    <script type="text/javascript" src="~/lib/tabulator/js/tabulator.min.js"></script>

    <script language="javascript">
        $('#probcount').hide();
        $('#resetbtn').hide();

        var postFilters = {}; // No filters at the start
        var refreshFilters = function () {
            var _filters = [];
            if (postFilters['name']) {
                _filters.push({ field: 'Name', type: 'like', value: postFilters['name'] });
            }
            if (postFilters['grade']) {
                _filters.push({ field: 'Grade', type: '=', value: postFilters['grade'] });
            }
            if (postFilters['repeats']) {
                _filters.push({ field: 'Repeats', type: '>=', value: postFilters['repeats'] });
            }
            if (postFilters['rating']) {
                _filters.push({ field: 'Rating', type: '>=', value: postFilters['rating'] });
            }
            if (postFilters['benchmark']) {
                _filters.push({ field: 'IsBenchmark', type: '=', value: true });
            }
            $table.setFilter(_filters);
            $('#probcount').text($table.getDataCount());
        };

        // init table
        var $selectedProb;
        var $selectedList;
        var $table;

        // Set up a trigger on key press which will apply filter after 1 second
        // Timer restarts if another key press occurs
        var nameFilterTimeout = null;
        $('#namefilter').on('keyup', function () {
            var that = this;
            if (nameFilterTimeout !== null) {
                clearTimeout(nameFilterTimeout);
            }
            nameFilterTimeout = setTimeout(function () {
                postFilters['name'] = $(that).val();
                refreshFilters();
            }, 1000);
        });

        // bind sort button click
        // change is-checked class on buttons
        $('.button-group').each(function (i, buttonGroup) {
            var $buttonGroup = $(buttonGroup);
            $buttonGroup.on('click tap', 'button', function () {
                $buttonGroup.find('.is-checked').removeClass('is-checked');
                $(this).addClass('is-checked');
            });
        });

        function showProblems(data) {
            if (data['Status'] == 200) {
                $table = new Tabulator("#problems", {
                    data: data['Problems'],           //load row data from array
                    layout: "fitColumns",      //fit columns to width of table
                    tooltips: true,            //show tool tips on cells
                    pagination: "local",       //paginate the data
                    paginationSize: 20,        //allow 20 rows per page of data
                    movableColumns: true,      //allow column order to be changed
                    resizableRows: true,       //allow row order to be changed
                    initialSort: [             //set the initial sort order of the data
                        { column: "Name", dir: "asc" },
                    ],
                    columns: [                 //define the table columns
                        { title: "Name", field: "Name" },
                        { title: "Grade", field: "GradeName" },
                        { title: "Repeats", field: "Repeats" },
                        { title: "Rating", field: "Rating" },
                        { title: "Benchmark", field: "IsBenchmark" },
                        { title: "Id", field: "Id", visible: false }
                    ],
                    selectable: 1,
                    rowSelected: function (row) {
                        $.ajax({
                            type: 'GET',
                            url: "/api/Problems/Choose/" + row.getData().Id
                        })
                        .done(function (data) {
                            if (data['Status'] != 200) {
                                if (!data['Message']) { data['Message'] = 'Unknown'; }
                                alert("HTTP code " + data['Status'] + ": " + data['Message']);
                            }
                        });

                    }
                });

                $('#probcount').text($table.getDataCount());
            }
            else {
                if (!data['Message']) { data['Message'] = 'Unknown'; }
                if (data['Status'] == 403 && data['SubStatus'] == "@Constants.GetString("TooManyProblemsCode")") {
                    alert(data['Message']);
                }
                else {
                    alert("HTTP code " + data['Status'] + ": " + data['Message']);
                }
            }
        };

        $('.list-select').on('click tap', function () {
            if ($selectedList) $selectedList.removeClass('selected');
            var $src = $(this);
            $.ajax({
                type: 'GET',
                url: "/api/ProblemLists/Choose/" + $src.find('.listId').text()
            })
                .done(function (data) {
                    if (data['Status'] == 200) {
                        $src.addClass('selected');
                        $selectedList = $src;
                        showProblems(data);
                    }
                    else {
                        if (!data['Message']) { data['Message'] = 'Unknown'; }
                        alert("HTTP code " + data['Status'] + ": " + data['Message']);
                    }
                });
        });
        $('#datagetter').on('click tap', function () {
            var preFilters = {};
            $('.filters button.is-checked').each(function (i, e) {
                var filterParts = $(this).attr('data-filter').split(':');
                if (filterParts[1] == "*") {
                    preFilters[filterParts[0]] = "@Constants.GetString("AllFilterName")";
                } else {
                    preFilters[filterParts[0]] = filterParts[1];
                }
            });
            $.ajax({
                type: 'POST',
                data: JSON.stringify(preFilters),
                url: "/api/Problems",
                contentType: 'application/json'
            })
                .done(function (data) {
                    showProblems(data);
                    // clear filters
                    $('.filters button.is-checked').each(function (i, e) {
                        var elem = $(e);
                        if (elem.hasClass('allfilter')) {
                            elem.removeClass('button-blue').addClass('button-red');
                            elem.siblings().removeClass('button-blue').addClass('button-red');
                        }
                        else {
                            elem.siblings().attr('disabled', true);
                        }
                    });
                    // set up handler for filter button click
                    $('.filters .button-red').on('click tap', function () {
                        var filterParts = $(this).attr('data-filter').split(':');
                        if (filterParts[1] == "*") {
                            delete postFilters[filterParts[0]];
                        } else {
                            postFilters[filterParts[0]] = filterParts[1];
                        }
                        refreshFilters();
                    });
                    $('#datagetter').hide();
                    $('#resetbtn').show();
                });

            $('#resetbtn').on('click tap', function () {
                $('.element-item').remove();
                $('.filters button')
                    .removeAttr('disabled')
                    .removeClass(['is-checked', 'button-red'])
                    .addClass('button-blue');
                $('.filters').off('click tap', 'button-blue');
                $('button.allfilter').addClass('is-checked');
                $('#probcount').hide();
                $('#datagetter').show();
                $(this).hide();
            });
        });

    </script>
}
