@model IEnumerable<MoonServer.Models.Problem>

@{
    ViewBag.Title = "MoonBoard Problems";
    List<string> gradeList = Constants.GetFilter("grade").Categories;
    gradeList.Sort(new MoonServer.Models.AmericanGradeComparer());
}
<div class="row w-100">
    <div id="datagetter" class="button-blue col-2">Get Data</div>
    <div id="resetbtn" class="button-blue col-2">Reset</div>
    <div class="col-4">&nbsp;</div>
    <div id="probcount" class="h1 col-2"></div>
    <div class="col-4">&nbsp;</div>
</div>

<div class="filters button-group">
    @foreach (var g in gradeList)
    {
        <button class="button-blue" data-filter="grade:@g">@g</button>
    }
    <button class="button-blue is-checked allfilter" data-filter="grade:*">show all</button>
</div>

<div class="filters button-group">
    @foreach (var i in Constants.GetFilter("repeats").Categories.ConvertAll(s => int.Parse(s)))
    {
        if (i > 0)
        {
            <button class="button-blue" data-filter="repeats:@i">@i+ repeat@(i > 1 ? "s" : "")</button>
        }
    }
    <button class="button-blue is-checked allfilter" data-filter="repeats:*">show all</button>
</div>

<div class="filters button-group">
    @foreach (var i in Constants.GetFilter("rating").Categories.ConvertAll(s => int.Parse(s)))
    {
        if (i > 0)
        {
            <button class="button-blue" data-filter="rating:@i">@i star@(i > 1 ? "s" : "")</button>
        }
    }
    <button class="button-blue is-checked allfilter" data-filter="rating:*">show all</button>
</div>

<div class="filters button-group">
    <button class="button-blue" data-filter="benchmark:B">benchmark only</button>
    <button class="button-blue is-checked allfilter" data-filter="benchmark:*">show all</button>
</div>

<div class="filters form-text"><input type="text" maxlength="20" id="namefilter" /></div>

<div id="sorts" class="button-group">
    <button class="button-blue is-checked" data-sort-by="name">name</button>
    <button class="button-blue" data-sort-by="grade">grade</button>
    <button class="button-blue" data-sort-by="rating">rating</button>
    <button class="button-blue" data-sort-by="repeats">repeats</button>
</div>

<div class="grid"><div id="gridstart" hidden></div></div>

@section scripts {
    <script src="https://unpkg.com/isotope-layout@3/dist/isotope.pkgd.js"></script>

    <script language="javascript">
        var filterFns = {
            grade: function (elem) {
                return $(elem).find('.grade').text() == postFilters["grade"];
            },
            name: function (elem) {
                return $(elem).find('.name').text().toLowerCase()
                    .startsWith(postFilters["name"].toLowerCase());
            },
            repeats: function (elem) {
                return parseInt($(elem).find('.repeats').text()) > parseInt(postFilters["repeats"]);
            },
            rating: function (elem) {
                return parseInt($(elem).find('.rating').text()) > parseInt(postFilters["rating"]);
            },
            benchmark: function (elem) {
                return $(elem).find('.benchmark').text() == "B";
            }
        };

        $('#resetbtn').hide();

        var postFilters = {}; // No filters at the start
        var filterFn = function () {
            for (var key in postFilters) {
                var fn = filterFns[key];
                if (!fn(this)) { return false; }
            }
            return true;
        };

        // init Isotope
        var $selected;
        var $grid = $('.grid');
        function updateGrid() {
            $grid = $('.grid').isotope({
                itemSelector: '.element-item',
                layoutMode: 'fitRows',
                transitionDuration: 0,
                filter: filterFn,
                getSortData: {
                    name: '.name',
                    grade: function (elem) { return parseInt($(elem).find('.grade').text().replace(/V/g, '')); },
                    rating: '.rating parseInt',
                    repeats: '.repeats parseInt'
                },
                sortAscending: {
                    name: true,
                    grade: true,
                    rating: false,
                    repeats: false
                },
                sortBy: 'name'
            });
        };

        // Set up a trigger on key press which will apply filter after 1 second
        // Timer restarts if another key press occurs
        var nameFilterTimeout = null;
        $('#namefilter').on('keyup', function () {
            var that = this;
            if (nameFilterTimeout !== null) {
                clearTimeout(nameFilterTimeout);
            }
            nameFilterTimeout = setTimeout(function () {
                postFilters['name'] = $(that).val();
                $grid.isotope({ filter: filterFn });
            }, 1000);
        });

        // bind sort button click
        $('#sorts').on( 'click', 'button', function() {
          var sortByValue = $(this).attr('data-sort-by');
          $grid.isotope({ sortBy: sortByValue });
        });

        // change is-checked class on buttons
        $('.button-group').each(function (i, buttonGroup) {
            var $buttonGroup = $(buttonGroup);
            $buttonGroup.on('click', 'button', function () {
                $buttonGroup.find('.is-checked').removeClass('is-checked');
                $(this).addClass('is-checked');
            });
        });

        $('#datagetter').on('click', function () {
            var preFilters = {};
            $('.filters button.is-checked').each(function (i, e) {
                var filterParts = $(this).attr('data-filter').split(':');
                if (filterParts[1] == "*") {
                    preFilters[filterParts[0]] = "@Constants.GetString("AllFilterName")";
                } else {
                    preFilters[filterParts[0]] = filterParts[1];
                }
            });
            $.ajax({
                type: 'POST',
                data: JSON.stringify(preFilters),
                url: "/api/Problems",
                contentType: 'application/json'
            })
                .done(function (data) {
                    if (data['Status'] == 200) {
                        $('.element-item').remove();
                        for (var i = 0; i < data['Problems'].length; i++) {
                            var prob = data['Problems'][i];
                            var probDiv = '<div class="element-item ' + prob.GradeName + '">' +
                                '<h3 class="name">' + prob.Name + '</h3>' +
                                '<p class="grade">' + prob.GradeName + '</p>' +
                                '<p class="repeats">' + prob.Repeats + '</p>' +
                                '<p class="rating">' + prob.Rating + '</p>' +
                                '<div class="benchmark">' + (prob.IsBenchmark ? "B" : "") + '</div>' +
                                '<p class="probId" hidden>' + prob.Id + '</p>' +
                                '</div>';
                            $grid.append(probDiv);
                        }
                        $('#probcount').text(data['Problems'].length);
                        updateGrid();
                        $('.filters button.is-checked').each(function (i, e) {
                            var elem = $(e);
                            if (elem.hasClass('allfilter')) {
                                elem.removeClass('button-blue').addClass('button-red');
                                elem.siblings().removeClass('button-blue').addClass('button-red');
                            }
                            else {
                                elem.siblings().attr('disabled', true);
                            }
                        });
                        // bind post-filter button click
                        $('.filters .button-red').on('click', function () {
                            var filterParts = $(this).attr('data-filter').split(':');
                            if (filterParts[1] == "*") {
                                delete postFilters[filterParts[0]];
                            } else {
                                postFilters[filterParts[0]] = filterParts[1];
                            }
                            $grid.isotope({ filter: filterFn });
                            $('#probcount').text($grid.isotope('getFilteredItemElements').length);
                        });
                        $('.element-item').on('click', function () {
                            $selected.removeClass('selected');
                            var $src = $(this);
                            $.ajax({
                                type: 'GET',
                                url: "/api/Problems/Choose/" + $src.find('.probId').text()
                            })
                                .done(function (data) {
                                    if (data['Status'] == 200) {
                                        $src.addClass('selected');
                                        $selected = $src;
                                    }
                                    else {
                                        if (!data['Message']) { data['Message'] = 'Unknown'; }
                                        alert("HTTP code " + data['Status'] + ": " + data['Message']);
                                    }
                                });
                        });
                        $('#datagetter').hide();
                        $('#resetbtn').show();
                    }
                    else {
                        if (!data['Message']) { data['Message'] = 'Unknown'; }
                        if (data['Status'] == 403 && data['SubStatus'] == "@Constants.GetString("TooManyProblemsCode")") {
                            alert(data['Message']);
                        }
                        else {
                            alert("HTTP code " + data['Status'] + ": " + data['Message']);
                        }
                    }
            });
            $('#resetbtn').on('click', function () {
                $('.element-item').remove();
                $('.filters button')
                    .removeAttr('disabled')
                    .removeClass(['is-checked', 'button-red'])
                    .addClass('button-blue');
                $('.filters').off('click', 'button-blue');
                $('button.allfilter').addClass('is-checked');
                $('#probcount').text('');
                $('#datagetter').show();
                $(this).hide();
            });
        });

    </script>
}