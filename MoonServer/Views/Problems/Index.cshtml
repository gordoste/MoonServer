@model IEnumerable<MoonServer.Models.ProblemList>

@{
    ViewBag.Title = "MoonBoard Problems";
    List<string> gradeList = Constants.GetFilter("grade").Categories;
    gradeList.Sort(new MoonServer.Models.AmericanGradeComparer());
}

<link href="~/lib/tabulator/css/tabulator.min.css" rel="stylesheet" />
<link href="~/lib/jquery-modal/jquery.modal.min.css" rel="stylesheet" />

<div class="container">
    <div class="row">
        <div class="col-8" id="filterDiv">
            <div class="row">
                <div class="col-3">
                    <label for="gradeGrp">Grade:</label>
                </div>
                <div id="gradeGrp" class="filters btn-group btn-group-sm" role="group">
                    @foreach (var g in gradeList)
                    {
                        <button type="button" class="btn btn-outline-primary" data-filter="grade:@g">@g</button>
                    }
                    <button type="button" class="btn btn-outline-primary active allfilter" data-filter="grade:*">show all</button>
                </div>
            </div>
            <div class="row">
                <div class="col-3">
                    <label for="repeatsGrp">Repeats:</label>
                </div>
                <div id="repeatsGrp" class="filters btn-group btn-group-sm" role="group">
                    @foreach (var r in Constants.GetFilter("repeats").Categories.ConvertAll(s => int.Parse(s)))
                    {
                        if (r > 0)
                        {
                            <button type="button" class="btn btn-outline-primary" data-filter="repeats:@r">>@r</button>
                        }
                    }
                    <button type="button" class="btn btn-outline-primary active allfilter" data-filter="repeats:*">show all</button>
                </div>
            </div>
            <div class="row">
                <div class="col-3">
                    <label for="ratingGrp">Rating:</label>
                </div>
                <div id="ratingGrp" class="filters btn-group btn-group-sm" role="group">
                    @foreach (var r in Constants.GetFilter("rating").Categories.ConvertAll(s => int.Parse(s)))
                    {
                        if (r > 0)
                        {
                            <button type="button" class="btn btn-outline-primary" data-filter="rating:@r">@( r + (r < 3 ? "+" : "") )</button>
                        }
                    }
                    <button type="button" class="btn btn-outline-primary active allfilter" data-filter="rating:*">show all</button>
                </div>
            </div>
            <div class="row">
                <div class="col-5">
                    <label for="benchmarkGrp">Benchmark only?</label>
                </div>
                <div id="benchmarkGrp" class="filters btn-group btn-group-sm" role="group">
                    <button type="button" class="btn btn-outline-primary" data-filter="benchmark:B">yes</button>
                    <button type="button" class="btn btn-outline-primary active allfilter" data-filter="benchmark:*">no</button>
                </div>
            </div>
            <div class="row">
                <div class="col-5 input-group">
                    <div class="input-group-prepend"><span class="input-group-text">Name</span></div>
                    <input type="text" class="form-control" maxlength="20" id="namefilter" />
                </div>
                <button type="button" id="datagetter" class="col-3 btn btn-primary">Get Data</button>
                <button type="button" id="resetbtn" class="col-3 btn btn-primary hide">Reset</button>
                <div id="probcount" class="h2 col-4"></div>
            </div>
        </div>

        <div class="col-4">
            <div class="row" id="lists"></div>
            <div class="row" id="addDiv"><button type="button" id="addBtn" class="btn btn-primary disabled">Add This Problem</button></div>
        </div>
    </div>


    <div class="row w-100" id="problems"></div>
    <div id="addLists" class="modal"><div id="addListsTbl"></div><a href="#" rel="modal:close">Close</a></div>

    @{ int i = 0; }
    <text id="list-data" hidden>
        @(++i > 1 ? "," : "" )
        @foreach (var item in Model)
        {
            @Html.Raw(item.PropertiesAsJson());
        }
    </text>
</div>
@section scripts {
    <script type="text/javascript" src="~/lib/tabulator/js/tabulator.min.js"></script>
    <script type="text/javascript" src="~/lib/jquery-modal/jquery.modal.min.js"></script>

    <script language="javascript">
        $('#probcount').hide();
        $('#resetbtn').hide();

        var postFilters = {}; // No filters at the start
        var refreshFilters = function () {
            var _filters = [];
            if (postFilters['name']) {
                _filters.push({ field: 'Name', type: 'like', value: postFilters['name'] });
            }
            if (postFilters['grade']) {
                _filters.push({ field: 'Grade', type: '=', value: postFilters['grade'] });
            }
            if (postFilters['repeats']) {
                _filters.push({ field: 'Repeats', type: '>=', value: postFilters['repeats'] });
            }
            if (postFilters['rating']) {
                _filters.push({ field: 'Rating', type: '>=', value: postFilters['rating'] });
            }
            if (postFilters['benchmark']) {
                _filters.push({ field: 'IsBenchmark', type: '=', value: true });
            }
            $table.setFilter(_filters);
            $('#probcount').text($table.getDataCount()).show();
        };

        // tables
        var $table;
        var $listTable;
        var $addListTable;

        // Set up a trigger on key press which will apply filter after 1 second
        // Timer restarts if another key press occurs
        var nameFilterTimeout = null;
        $('#namefilter').on('keyup', function () {
            var that = this;
            if (nameFilterTimeout !== null) {
                clearTimeout(nameFilterTimeout);
            }
            nameFilterTimeout = setTimeout(function () {
                postFilters['name'] = $(that).val();
                refreshFilters();
            }, 1000);
        });

        function showProblems(data) {
            if (data['Status'] == 200) {
                $table = new Tabulator("#problems", {
                    data: data['Problems'],    //load row data from array
                    layout: "fitData",         //fit columns to width of data
                    layoutColumnsOnNewData: true,
                    tooltips: true,            //show tool tips on cells
                    pagination: "local",       //paginate the data
                    paginationSize: 20,        //allow 20 rows per page of data
                    movableColumns: false,      //allow column order to be changed
                    resizableRows: false,       //allow row order to be changed
                    initialSort: [             //set the initial sort order of the data
                        { column: "Name", dir: "asc" },
                    ],
                    columns: [                 //define the table columns
                        { title: "Name", field: "Name" },
                        { title: "Grade", field: "GradeName" },
                        { title: "Repeats", field: "Repeats" },
                        { title: "Rating", field: "Rating" },
                        { title: "Benchmark", field: "IsBenchmark" },
                        { title: "Id", field: "Id", visible: false }
                    ],
                    selectable: 1,
                    rowTap: function (e, row) { row.toggleSelect(); },
                    rowSelected: function (row) {
                        $.ajax({
                            type: 'GET',
                            url: "/api/Problems/Choose/" + row.getData().Id
                        })
                        .done(function (data) {
                            if (data['Status'] != 200) {
                                if (!data['Message']) { data['Message'] = 'Unknown'; }
                                alert("HTTP code " + data['Status'] + ": " + data['Message']);
                            }
                        });
                    },
                    rowSelectionChanged: function (data, rows) {
                        if (data.length == 0) {
                            $('#addBtn').addClass('disabled');
                        }
                        else {
                            $('#addBtn').removeClass('disabled');
                        }
                    }

                });

                $('#probcount').text($table.getDataCount()).show();
            }
            else {
                if (!data['Message']) { data['Message'] = 'Unknown'; }
                if (data['Status'] == 403 && data['SubStatus'] == "@Constants.GetString("TooManyProblemsCode")") {
                    alert(data['Message']);
                }
                else {
                    alert("HTTP code " + data['Status'] + ": " + data['Message']);
                }
            }
        };

        $('#datagetter').on('click tap', function () {
            $listTable.deselectRow();
            var preFilters = {};
            $('.filters button.active').each(function (i, e) {
                var filterParts = $(this).attr('data-filter').split(':');
                if (filterParts[1] == "*") {
                    preFilters[filterParts[0]] = "@Constants.GetString("AllFilterName")";
                } else {
                    preFilters[filterParts[0]] = filterParts[1];
                }
            });
            $.ajax({
                type: 'POST',
                data: JSON.stringify(preFilters),
                url: "/api/Problems",
                contentType: 'application/json'
            })
                .done(function (data) {
                    showProblems(data);
                    // clear filters
                    $('.filters button.active').each(function (i, e) {
                        var elem = $(e);
                        if (elem.hasClass('allfilter')) {
                            elem.removeClass('btn-outline-primary').addClass('btn-outline-danger');
                            elem.siblings().removeClass('btn-outline-primary').addClass('btn-outline-danger');
                        }
                        else {
                            elem.siblings().attr('disabled', true);
                        }
                    });
                    // set up handler for filter button click
                    $('.filters .btn-outline-danger').on('click tap', function () {
                        var filterParts = $(this).attr('data-filter').split(':');
                        if (filterParts[1] == "*") {
                            delete postFilters[filterParts[0]];
                        } else {
                            postFilters[filterParts[0]] = filterParts[1];
                        }
                        refreshFilters();
                    });
                    $('#datagetter').hide();
                    $('#resetbtn').show();
                });

            $('#resetbtn').on('click tap', function () {
                $('.filters button')
                    .removeAttr('disabled')
                    .removeClass(['active', 'btn-outline-danger'])
                    .addClass('btn-outline-primary');
                $('.filters').off('click tap', 'btn-outline-primary');
                $('button.allfilter').addClass('active');
                $('#probcount').hide();
                $('#datagetter').show();
                $(this).hide();
            });

        });

        $(document).ready(function () {
            $('.btn-group button').on('click tap', function () {
                $(this).siblings('button').removeClass('active');
                $(this).addClass('active');
            });

            $listTable = new Tabulator("#lists", {
                data: eval('[' + $('#list-data').text().trim() + ']'),            //load row data from array
                layout: "fitData",         //fit columns to width of data
                layoutColumnsOnNewData: true,
                tooltips: true,            //show tool tips on cells
                movableColumns: false,     //allow column order to be changed
                resizableRows: false,      //allow row order to be changed
                initialSort: [             //set the initial sort order of the data
                    { column: "Name", dir: "asc" },
                ],
                columns: [                 //define the table columns
                    { title: "Name", field: "Name" },
                    { title: "Count", field: "Count" },
                    { title: "Id", field: "Id", visible: false }
                ],
                selectable: 1,
                rowTap: function (e, row) { row.toggleSelect(); },
                rowSelected: function (row) {
                    $.ajax({
                        type: 'GET',
                        url: "/api/ProblemLists/Choose/" + row.getData().Id
                    }).done(function (data) { showProblems(data); });
                }
            });

            $('#addBtn').on('click tap', function () {
                $('#addLists').modal();
                $addListTable = new Tabulator("#addListsTbl", {
                    data: eval('[' + $('#list-data').text().trim() + ']'),            //load row data from array
                    layout: "fitData",         //fit columns to width of data
                    layoutColumnsOnNewData: true,
                    tooltips: true,            //show tool tips on cells
                    movableColumns: false,     //allow column order to be changed
                    resizableRows: false,      //allow row order to be changed
                    initialSort: [             //set the initial sort order of the data
                        { column: "Name", dir: "asc" },
                    ],
                    columns: [                 //define the table columns
                        { title: "Name", field: "Name" },
                        { title: "Count", field: "Count" },
                        { title: "Id", field: "Id", visible: false }
                    ],
                    selectable: 1,
                    rowTap: function (e, row) { row.toggleSelect(); },
                    rowSelected: function (row) {
                        var listId = row.getData().Id;
                        var probs = $table.getSelectedRows();
                        var probId = probs[0].getData().Id;
                        // TODO: Call controller to add problem to list
                    }
                });
            });
        });
    </script>
}
